== Idioms.function == map:if, shortcut:f  ==
/* 
 * ===  FUNCTION  ======================================================================
 *         Name:  |?FUNCTION_NAME|
 *  Description:  
 * =====================================================================================
 */
void<CURSOR> |FUNCTION_NAME| ( <+argument_list+> ) {
<SPLIT>	return <+return_value+>;
}		/* -----  end of function |FUNCTION_NAME|  ----- */
== Idioms.function-static == map:isf, shortcut:t  ==
/* 
 * ===  FUNCTION  ======================================================================
 *         Name:  |?FUNCTION_NAME|
 *  Description:  
 * =====================================================================================
 */
static void<CURSOR> |FUNCTION_NAME| ( <+argument_list+> ) {
<SPLIT>	return <+return_value+>;
}		/* -----  end of static function |FUNCTION_NAME|  ----- */
== Idioms.define == map:dh  ==
# include <stdlib.h> <CURSOR> // # include <cstdlib>
# if defined(_WIN32)
    # define PLATFORM_NAME "Windows" // Windows
# elif defined(_WIN64)
    # define PLATFORM_NAME "Windows" // Windows
# elif defined(__CYGWIN__) && !defined(_WIN32)
    # define PLATFORM_NAME "Windows" // Windows (Cygwin POSIX under Microsoft Window)
# elif defined(__ANDROID__)
    # define PLATFORM_NAME "Android" // Android (implies Linux, so it must come first)
# elif defined(__linux__)
    # define PLATFORM_NAME "GNU/Linux" // Arch, Debian, Gentoo, Fedora, Ubuntu, etc.
# elif defined(__unix__) || defined(__APPLE__) && defined(__MACH__)
    # include <sys/param.h>
    # if defined(BSD)
        # define PLATFORM_NAME "BSD" // FreeBSD, NetBSD, OpenBSD, DragonFly BSD
    # endif
# elif defined(__hpux)
    # define PLATFORM_NAME "HP-UX" // HP-UX
# elif defined(_AIX)
    # define PLATFORM_NAME "AIX" // IBM AIX
# elif defined(__APPLE__) && defined(__MACH__) // Apple OS-X and iOS (Darwin)
    # include <TargetConditionals.h>
    # if TARGET_IPHONE_SIMULATOR == 1
        # define PLATFORM_NAME "iOS" // Apple iOS
    # elif TARGET_OS_IPHONE == 1
        # define PLATFORM_NAME "iOS" // Apple iOS
    # elif TARGET_OS_MAC == 1
        # define PLATFORM_NAME "macOS" // Apple OS-X
    # endif
# elif defined(__sun) && defined(__SVR4)
    # define PLATFORM_NAME "Solaris" // Oracle Solaris, Open Indiana
# else
    # define PLATFORM_NAME NULL
# endif
const char *platform_id() {
    return (PLATFORM_NAME == NULL) ? "" : PLATFORM_NAME;
}
== Idioms.run == map:ir, shortcut:r ==
/* 
 * ===  FUNCTION  ======================================================================
 *         Name:  run
 *  Description:  run function  
 * =====================================================================================
 */
int run(int c, char **v) {
<SPLIT> // printf("Platform: %s\n",platform_id());
    <CURSOR>
<SPLIT> return EXIT_SUCCESS;
}				/* ----------  end of function run ---------- */
== Idioms.main == map:im, shortcut:m ==
int main(int argc, char **argv) {
    return run(argc, argv);
}				

/* ----------  end of file  ---------- */

== Idioms.enum == map:ie, shortcut:e  ==
enum |?ENUM_NAME| {<CURSOR>
<SPLIT>};				/* ----------  end of enum |ENUM_NAME|  ---------- */

typedef enum |ENUM_NAME| |ENUM_NAME:c|;
== Idioms.struct == map:is, shortcut:s  ==
struct |?STRUCT_NAME| {<CURSOR>
<SPLIT>};				/* ----------  end of struct |STRUCT_NAME|  ---------- */

typedef struct |STRUCT_NAME| |STRUCT_NAME:c|;
== Idioms.union == map:iu, shortcut:u  ==
union |?UNION_NAME| {<CURSOR>
<SPLIT>};				/* ----------  end of union |UNION_NAME|  ---------- */

typedef union |UNION_NAME| |UNION_NAME:c|;
== Idioms.scanf == map:isc, shortcut:s, insert  ==
scanf ( "<CURSOR>", & );
== Idioms.printf == map:ipr, shortcut:p, insert  ==
printf ( "<CURSOR>\n" );
== Idioms.calloc == map:ica, shortcut:c  ==
|?POINTER|	= calloc ( (size_t)(<CURSOR><+COUNT+>), sizeof(<+TYPE+>) );
if ( |POINTER|==NULL ) {
	fprintf ( stderr, "\ndynamic memory allocation failed\n" );
	exit (EXIT_FAILURE);
}

free ( |POINTER| );
|POINTER|	= NULL;

== Idioms.malloc == map:ima, shortcut:m  ==
|?POINTER|	= malloc ( sizeof(<CURSOR><+TYPE+>) );
if ( |POINTER|==NULL ) {
	fprintf ( stderr, "\ndynamic memory allocation failed\n" );
	exit (EXIT_FAILURE);
}

free ( |POINTER| );
|POINTER|	= NULL;

== Idioms.realloc == map:ire, shortcut:r  ==
|?POINTER|	= realloc ( |POINTER|, sizeof(<CURSOR><+TYPE+>) );
if ( |POINTER|==NULL ) {
	fprintf ( stderr, "\ndynamic memory reallocation failed\n" );
	exit (EXIT_FAILURE);
}

== Idioms.sizeof == map:isi, shortcut:s, insert  ==
sizeof(<CURSOR><SPLIT>)
== Idioms.assert == map:ias, shortcut:a, insert  ==
assert( <CURSOR><SPLIT> );
== Idioms.open-input-file == map:ii, shortcut:i  ==
FILE	*|?FILEPOINTER|;										/* input-file pointer */
char	*|FILEPOINTER|_file_name = "<CURSOR>";		/* input-file name    */

|FILEPOINTER|	= fopen( |FILEPOINTER|_file_name, "r" );
if ( |FILEPOINTER| == NULL ) {
	fprintf ( stderr, "couldn't open file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno) );
	exit (EXIT_FAILURE);
}
<SPLIT>{-continue_here-}
if( fclose(|FILEPOINTER|) == EOF ) {			/* close input file   */
	fprintf ( stderr, "couldn't close file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno) );
	exit (EXIT_FAILURE);
}

== Idioms.open-output-file == map:io, shortcut:o  ==
FILE	*|?FILEPOINTER|;										/* output-file pointer */
char	*|FILEPOINTER|_file_name = "<CURSOR>";		/* output-file name    */

|FILEPOINTER|	= fopen( |FILEPOINTER|_file_name, "w" );
if ( |FILEPOINTER| == NULL ) {
	fprintf ( stderr, "couldn't open file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno) );
	exit (EXIT_FAILURE);
}
<SPLIT>{-continue_here-}
if( fclose(|FILEPOINTER|) == EOF ) {			/* close output file   */
	fprintf ( stderr, "couldn't close file '%s'; %s\n",
			|FILEPOINTER|_file_name, strerror(errno) );
	exit (EXIT_FAILURE);
}

== Idioms.fprintf == map:ifpr, shortcut:f, insert  ==
fprintf ( |?FILEPOINTER|, "<CURSOR>\n",  );
== Idioms.fscanf == map:ifsc, shortcut:f, insert  ==
fscanf ( |?FILEPOINTER|, "<CURSOR>", & );
